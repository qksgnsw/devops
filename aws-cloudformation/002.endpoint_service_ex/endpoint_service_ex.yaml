AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template with Two VPCs and Subnets

Resources:
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 20.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1VPC1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC1
      CidrBlock: 10.0.0.0/24

  PublicSubnet1VPC2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC2
      CidrBlock: 20.0.0.0/24

  PublicSubnet2VPC2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      VpcId: !Ref VPC2
      CidrBlock: 20.0.1.0/24

  InternetGateway1:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  InternetGateway2:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGateway2

  PublicRouteTable1VPC1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1

  PublicRouteTable1VPC2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2

  PublicRoute1VPC1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref PublicRouteTable1VPC1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  PublicRoute1VPC2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment2
    Properties:
      RouteTableId: !Ref PublicRouteTable1VPC2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2

  SubnetRouteTableAssociation1VPC1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1VPC1
      RouteTableId: !Ref PublicRouteTable1VPC1

  SubnetRouteTableAssociation1VPC2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1VPC2
      RouteTableId: !Ref PublicRouteTable1VPC2

  SubnetRouteTableAssociation2VPC2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2VPC2
      RouteTableId: !Ref PublicRouteTable1VPC2

  SecurityGroupVPC1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC1
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  SecurityGroupVPC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC2
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  EC2Instance1VPC1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01056eaaa603955a4
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 10.0.0.100
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroupVPC1
          SubnetId: !Ref PublicSubnet1VPC1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html

  EC2Instance1VPC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01056eaaa603955a4
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 20.0.0.100
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroupVPC2
          SubnetId: !Ref PublicSubnet1VPC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html
  
  EC2Instance2VPC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01056eaaa603955a4
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 20.0.1.100
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroupVPC2
          SubnetId: !Ref PublicSubnet2VPC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html

# 인터넷 경계가 아닌 내부 경계로
# nlb로 만들어야함.
# 1. nlb와 연결하는 endpoint service 생성
# 2. 1에서 만든 endpoint service와 연결하는 interface endpoint 생성
# 3. endpoint service에서 엔드포인트 연결 요청 수락
# 4. endpoint에서 DNS 확인. 해당 DNS로 테스트하면 완료됨.
  MyNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyNetworkLoadBalancer
      Subnets:
        - !Ref PublicSubnet1VPC2
        - !Ref PublicSubnet2VPC2  # Add more subnets if needed
      Scheme: internal  # For public access; use "internal" for private
      Type: network

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 80  # Adjust the port as needed
      Protocol: HTTP
      VpcId: !Ref VPC2
      Targets:
        - Id: !Ref EC2Instance1VPC2  # Replace with actual instance ID
        - Id: !Ref EC2Instance2VPC2  # Replace with actual instance ID

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyNetworkLoadBalancer
      Protocol: TCP   
      Port: 80
      DefaultActions:
        - TargetGroupArn: !Ref MyTargetGroup
          Type: forward
  
  MyEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      NetworkLoadBalancerArns: 
      - !Ref MyNetworkLoadBalancer

  MyEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      SecurityGroupIds: 
        - !Ref SecurityGroupVPC1
      ServiceName: !Ref MyEndpointService
      SubnetIds: 
        - !Ref PublicSubnet1VPC1
      VpcEndpointType: Interface
      VpcId: !Ref VPC1
################################################
  # LoadBalancerVPC2:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Subnets:
  #       - !Ref PublicSubnet1VPC2
  #       - !Ref PublicSubnet2VPC2
  #     SecurityGroups:
  #       - !Ref SecurityGroupVPC2

  # TargetGroupVPC2:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckIntervalSeconds: 30
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 15
  #     HealthyThresholdCount: 5
  #     Matcher:
  #       HttpCode: '200'
  #     Name: EC2TargetGroup
  #     Port: 80
  #     Protocol: HTTP
  #     TargetGroupAttributes:
  #     - Key: deregistration_delay.timeout_seconds
  #       Value: '20'
  #     Targets:
  #     - Id:
  #         !Ref EC2Instance1VPC2
  #         !Ref EC2Instance2VPC2
  #     VpcId: !Ref VPC2

  # LoadBalancerListenerVPC2:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroupVPC2
  #     LoadBalancerArn: !Ref LoadBalancerVPC2
  #     Port: 80
  #     Protocol: HTTP
        
  # VPC2EndpointService:
  #   Type: AWS::EC2::VPCEndpointService
  #   Properties:
  #     NetworkLoadBalancerArns:
  #       - !Ref LoadBalancerVPC2

  # VPC1InterfaceEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcEndpointType: 'Interface'
  #     ServiceName: !Join [".", ["com.amazonaws", !Ref "AWS::Region", "elasticloadbalancing"]]
  #     VpcId: !Ref VPC1
  #     SubnetIds:
  #       - !Ref PublicSubnet1VPC1
  #     SecurityGroupIds:
  #       - !Ref SecurityGroupVPC1