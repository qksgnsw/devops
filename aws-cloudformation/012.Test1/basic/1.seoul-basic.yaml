Resources:
# Seoul VPC1
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.1.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: VPC1

  VPC1IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC1-IGW

  VPC1IGWAtt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPC1IGW
      VpcId: !Ref VPC1

  VPC1PubSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: VPC1-Pub-SN1

  VPC1PubSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: VPC1-Pub-SN2

  VPC1PriSN3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: VPC1-Pri-SN3

  VPC1PriSN4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: VPC1-Pri-SN4

  VPC1PubRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-Pub-RT1

  VPC1PubSN1RT1Ass:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1PubRT1
      SubnetId: !Ref VPC1PubSN1

  VPC1PubSN2RT1Ass:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1PubRT1
      SubnetId: !Ref VPC1PubSN2

  VPC1PubRT1Route1:
    Type: AWS::EC2::Route
    DependsOn: VPC1IGWAtt
    Properties:
      RouteTableId: !Ref VPC1PubRT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC1IGW

  VPC1PriRT3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-Pri-RT3

  VPC1PriSN3RT3Ass:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1PriRT3
      SubnetId: !Ref VPC1PriSN3

  VPC1PriRT3Route1:
    Type: AWS::EC2::Route
    DependsOn: VPC1NATInstance1
    Properties:
      RouteTableId: !Ref VPC1PriRT3
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VPC1NATInstance1

  VPC1PriRT4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-Pri-RT4

  VPC1PriSN4RT4Ass:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1PriRT4
      SubnetId: !Ref VPC1PriSN4

  VPC1PriRT4Route1:
    Type: AWS::EC2::Route
    DependsOn: VPC1NATInstance2
    Properties:
      RouteTableId: !Ref VPC1PriRT4
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VPC1NATInstance2

  VPC1NAT1SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-NAT1-SG
      Tags:
      - Key : Name
        Value : VPC1-NAT1-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8
      - IpProtocol: -1
        CidrIp: 10.1.3.0/24

  VPC1NAT2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-NAT2-SG
      Tags:
      - Key : Name
        Value : VPC1-NAT2-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.1.100/32
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8
      - IpProtocol: -1
        CidrIp: 10.1.4.0/24

  VPC1WEBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-WEB-SG
      Tags:
      - Key : Name
        Value : VPC1-WEB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.1.1.100/32
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  VPC1ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-ALB-SG
      Tags:
      - Key : Name
        Value : VPC1-ALB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  VPC1NATInstance1ENI:
   Type: AWS::EC2::NetworkInterface
   Properties:
       SubnetId: !Ref VPC1PubSN1
       Description: VPC1-NAT-Instance1 eth0
       GroupSet:
       - !Ref VPC1NAT1SG
       PrivateIpAddress: 10.1.1.100
       SourceDestCheck: false
       Tags:
           - Key: Name
             Value: VPC1-NAT-Instance1-ENI

  VPC1NATInstance1:
   Type: AWS::EC2::Instance
   Properties:
     ImageId: ami-084e92d3e117f7692
     InstanceType: t2.micro
     Tags:
       - Key: Name
         Value: VPC1-NAT-Instance1
     NetworkInterfaces:
       - NetworkInterfaceId: !Ref VPC1NATInstance1ENI
         DeviceIndex: 0
     UserData:
       Fn::Base64: |
          #!/bin/bash
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum -y install iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  VPC1NATInstance2ENI:
   Type: AWS::EC2::NetworkInterface
   Properties:
       SubnetId: !Ref VPC1PubSN2
       Description: VPC1-NAT-Instance2 eth0
       GroupSet:
       - !Ref VPC1NAT2SG
       PrivateIpAddress: 10.1.2.100
       SourceDestCheck: false
       Tags:
           - Key: Name
             Value: VPC1-NAT-Instance2-ENI

  VPC1NATInstance2:
   Type: AWS::EC2::Instance
   Properties:
     ImageId: ami-084e92d3e117f7692
     InstanceType: t2.micro
     Tags:
       - Key: Name
         Value: VPC1-NAT-Instance2
     NetworkInterfaces:
       - NetworkInterfaceId: !Ref VPC1NATInstance2ENI
         DeviceIndex: 0
     UserData:
       Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum -y install iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  VPC1WEBInstance3:
    Type: AWS::EC2::Instance
    DependsOn: VPC1PriRT3Route1
    Properties:
      ImageId: ami-084e92d3e117f7692
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: VPC1-WEB-Instance3
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC1PriSN3
          GroupSet:
          - !Ref VPC1WEBSG
          PrivateIpAddress: 10.1.3.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum -y install httpd
          systemctl start httpd & systemctl enable httpd
          echo "<h1>TEST WEB Server 1</h1>" > /var/www/html/index.html

  VPC1WEBInstance4:
    Type: AWS::EC2::Instance
    DependsOn: VPC1PriRT4Route1
    Properties:
      ImageId: ami-084e92d3e117f7692
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: VPC1-WEB-Instance4
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC1PriSN4
          GroupSet:
          - !Ref VPC1WEBSG
          PrivateIpAddress: 10.1.4.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum -y install httpd
          systemctl start httpd & systemctl enable httpd
          echo "<h1>TEST WEB Server 2</h1>" > /var/www/html/index.html

  VPC1ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Name: VPC1-ALB
      SecurityGroups:
        - !Ref VPC1ALBSG
      Subnets:
        - !Ref VPC1PubSN1
        - !Ref VPC1PubSN2

  VPC1TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: VPC1WEBInstance4
    Properties:
      Name: VPC1TG
      Port: 80
      Protocol: HTTP
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC1
      Targets:
        - Id: !Ref VPC1WEBInstance3
          Port: 80
        - Id: !Ref VPC1WEBInstance4
          Port: 80
      Tags:
      - Key : Name
        Value : VPC1-TG

  VPC1ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref VPC1TG
      LoadBalancerArn: !Ref VPC1ALB
      Port: 80
      Protocol: HTTP

# Seoul VPC2
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.2.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: VPC2

  VPC2IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC2-IGW

  VPC2IGWAtt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPC2IGW
      VpcId: !Ref VPC2

  VPC2PubSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.2.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: VPC2-Pub-SN1

  VPC2PriSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC2
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.2.2.0/24
      Tags:
        - Key: Name
          Value: VPC2-Pri-SN2

  VPC2PubRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-Pub-RT1

  VPC2PubSN1RT1Ass:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2PubRT1
      SubnetId: !Ref VPC2PubSN1

  VPC2PubRT1Route1:
    Type: AWS::EC2::Route
    DependsOn: VPC2IGWAtt
    Properties:
      RouteTableId: !Ref VPC2PubRT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC2IGW

  VPC2PriRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2
      Tags:
        - Key: Name
          Value: VPC2-Pri-RT2

  VPC2PriSN2RT2Ass:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC2PriRT2
      SubnetId: !Ref VPC2PriSN2

  VPC2PriRT2Route1:
    Type: AWS::EC2::Route
    DependsOn: VPC2CGW
    Properties:
      RouteTableId: !Ref VPC2PriRT2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VPC2CGW

  VPC2CGWSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC2
      GroupDescription: VPC2-CGW-SG
      Tags:
      - Key : Name
        Value : VPC2-CGW-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8
      - IpProtocol: -1
        CidrIp: 10.2.2.0/24

  VPC2DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC2
      GroupDescription: VPC2-DB-SG
      Tags:
      - Key : Name
        Value : VPC2-DB-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.2.1.100/32
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 10.0.0.0/8

  VPC2CGWENI:
   Type: AWS::EC2::NetworkInterface
   Properties:
       SubnetId: !Ref VPC2PubSN1
       Description: VPC2-CGW eth0
       GroupSet:
       - !Ref VPC2CGWSG
       PrivateIpAddress: 10.2.1.100
       SourceDestCheck: false
       Tags:
           - Key: Name
             Value: VPC2-CGW-ENI

  VPC2CGW:
   Type: AWS::EC2::Instance
   Properties:
     ImageId: ami-084e92d3e117f7692
     InstanceType: t2.micro
     Tags:
       - Key: Name
         Value: VPC2-CGW
     NetworkInterfaces:
       - NetworkInterfaceId: !Ref VPC2CGWENI
         DeviceIndex: 0
     UserData:
       Fn::Base64: |
          #!/bin/bash
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          yum -y install iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  VPC2DB:
    Type: AWS::EC2::Instance
    DependsOn: VPC2PriRT2Route1
    Properties:
      ImageId: ami-084e92d3e117f7692
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: VPC2-DB
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref VPC2PriSN2
          GroupSet:
          - !Ref VPC2DBSG
          PrivateIpAddress: 10.2.2.100
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "p@ssw0rd" | passwd --stdin root
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          systemctl restart sshd