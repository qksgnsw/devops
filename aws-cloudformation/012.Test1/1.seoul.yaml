Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet1
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PrivateSubnet1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.4.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

### 라우팅 테이블 설정
# 1. 라우팅 테이블 생성
# 2. 라우팅 정책 생성
# 2-1. 생성된 정책을 라우팅 테이블에 적용
# 3. 라우팅 테이블과 서브넷 연결
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociationPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: PrivRouteTable

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: 
      - AttachGateway
      - PrivRouteTable
      - BastionWithNAT1
    Properties:
      RouteTableId: !Ref PrivRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # NAT instance의 eni 로 설정
      # 로 해야하는데 InstanceId로 해도 됨. 왜지?
      # NetworkInterfaceId: 
      # GatewayId: !Ref InternetGateway
      InstanceId: !Ref BastionWithNAT1

  SubnetRouteTableAssociationPriv1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivRouteTable

  SubnetRouteTableAssociationPriv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivRouteTable

########################
#                      #
#  전송 게이트 웨이        #
#                      #
########################
  # 1단계: Transit Gateway 생성 
  tgw:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: 65000
      Description: "TGW Route Integration Test"
      AutoAcceptSharedAttachments: "disable"
      DefaultRouteTableAssociation: "enable"
      DnsSupport: "enable"
      VpnEcmpSupport: "enable"
      Tags:
      - Key: Name
        Value: tgw
  VPCTransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      Options:
        DnsSupport: "enable"
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TransitGatewayId: !Ref tgw
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: VPCTransitGatewayAttachment
  # # 3단계: Transit Gateway와 VPC 사이에 경로 추가
  # # 3-1: 라우팅 테이블 생성
  # DefaultTransitGatewayRouteTable:
  #   Type: AWS::EC2::TransitGatewayRouteTable
  #   Properties: 
  #     Tags: 
  #       - Key: Name
  #         Value: DefaultTransitGatewayRouteTable
  #     TransitGatewayId: !Ref TGW1
  # # 3-3 라우팅 테이블 연결
  # TransitGatewayRoute1DefaultAssociation:
  #   Type: AWS::EC2::TransitGatewayRouteTableAssociation
  #   Properties: 
  #     TransitGatewayAttachmentId: !Ref VPCTransitGatewayAttachment
  #     TransitGatewayRouteTableId: !Ref DefaultTransitGatewayRouteTable  
  # # 3-4 라우팅 테이블 전파 
  # TransitGatewayRoute1DefaultPropagation:
  #   Type: AWS::EC2::TransitGatewayRouteTablePropagation
  #   Properties: 
  #     TransitGatewayAttachmentId: !Ref VPCTransitGatewayAttachment
  #     TransitGatewayRouteTableId: !Ref DefaultTransitGatewayRouteTable


### 보안 그룹 생성
  # 모든 트래픽 허용
  SGBastionWithNAT:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: SGBastionWithNAT
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1  # All protocols
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1  # All protocols

  SGEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: SGEC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

# EC2 생성
# 1. NAT instance 생성
  BastionWithNAT1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01056eaaa603955a4
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SourceDestCheck: false # NAT Instance의 경우 반드시 false로 설정
      Tags:
      - Key: Name
        Value: BastionWithNAT1
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 10.1.1.100
          DeviceIndex: 0
          GroupSet:
            - !Ref SGBastionWithNAT
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd

          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html

          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          
          yum install -y iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  BastionWithNAT2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01056eaaa603955a4
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      SourceDestCheck: false # NAT Instance의 경우 반드시 false로 설정
      Tags:
      - Key: Name
        Value: BastionWithNAT2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 10.1.2.100
          DeviceIndex: 0
          GroupSet:
            - !Ref SGBastionWithNAT
          SubnetId: !Ref PublicSubnet2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
          
          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          
          yum install -y iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

###### Auto Scailing 작업 시작
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: ALBSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  
# 1. 오토스케일링으로 만들어질 ec2들 설정
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            # AssociatePublicIpAddress: true
            Groups:
              - !Ref SGEC2
            DeleteOnTermination: true
        Placement:
          Tenancy: default
        ImageId: ami-01056eaaa603955a4
        InstanceType: t2.micro
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "password!" | passwd --stdin root
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            systemctl restart sshd
            yum update -y
            yum install -y httpd.x86_64
            systemctl start httpd.service
            systemctl enable httpd.service
            echo "<h1>Hello World from $(hostname -f): AUTO SCAILNG INSTANCE.</h1>" > /var/www/html/index.html
# 2. ALB 설정
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: webserverALB
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Name: AutoScailingEC2
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup   
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

# 3. Auto Scailing Group 설정
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Cooldown: 10
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: ASG
          PropagateAtLaunch: true

  ASGPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
        # ALBRequestCountPerTarget | ASGAverageCPUUtilization | ASGAverageNetworkIn | ASGAverageNetworkOut
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 5

Outputs:
  TransitGatewayId:
    Description: my transit gateway id.
    Value: !Ref tgw
  VPCID:
    Description: my VPC id.
    Value: !Ref VPC
  PublicRouteTable:
    Description: my PublicRouteTable id.
    Value: !Ref PublicRouteTable
  albArn:
    Description: my PublicRouteTable id.
    Value: !Ref ALB