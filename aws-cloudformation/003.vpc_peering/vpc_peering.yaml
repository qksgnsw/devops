AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template with Two VPCs and Subnets

Resources:
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.41.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.42.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1VPC1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC1
      CidrBlock: 10.41.1.0/24

  PublicSubnet1VPC2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC2
      CidrBlock: 10.42.1.0/24

  InternetGateway1:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  InternetGateway2:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC2
      InternetGatewayId: !Ref InternetGateway2

  PublicRouteTable1VPC1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1

  PublicRouteTable1VPC2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC2

  #### 추가
  VpcPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !Ref VPC2
      VpcId: !Ref VPC1

  AccepterRoute1:
    Type: AWS::EC2::Route
    DependsOn: VpcPeeringConnection
    Properties:
      RouteTableId: !Ref PublicRouteTable1VPC1
      DestinationCidrBlock: 10.42.0.0/16
      VpcPeeringConnectionId: !Ref VpcPeeringConnection

  AccepterRoute2:
    Type: AWS::EC2::Route
    DependsOn: VpcPeeringConnection
    Properties:
      RouteTableId: !Ref PublicRouteTable1VPC2
      DestinationCidrBlock: 10.41.0.0/16
      VpcPeeringConnectionId: !Ref VpcPeeringConnection
  #### 추가

  PublicRoute1VPC1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref PublicRouteTable1VPC1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1

  PublicRoute1VPC2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment2
    Properties:
      RouteTableId: !Ref PublicRouteTable1VPC2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway2

  SubnetRouteTableAssociation1VPC1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1VPC1
      RouteTableId: !Ref PublicRouteTable1VPC1

  SubnetRouteTableAssociation1VPC2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1VPC2
      RouteTableId: !Ref PublicRouteTable1VPC2

  SecurityGroupVPC1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC1
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 10.42.0.0/16
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  SecurityGroupVPC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC2
      VpcId: !Ref VPC2
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 10.41.0.0/16
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  EC2Instance1VPC1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01056eaaa603955a4
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 10.41.1.100
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroupVPC1
          SubnetId: !Ref PublicSubnet1VPC1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html

  EC2Instance1VPC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-01056eaaa603955a4
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 10.42.1.100
          DeviceIndex: 0
          GroupSet:
            - !Ref SecurityGroupVPC2
          SubnetId: !Ref PublicSubnet1VPC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd
          yum update -y
          yum install -y httpd.x86_64
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "Hello World from $(hostname -f)" > /var/www/html/index.html

  
