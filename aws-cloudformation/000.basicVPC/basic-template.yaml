Description: The template is BASIC. This has one VPC, one IGW, 2 Public Subnet, 2 private Subnet, 2 RT, 1 SG, 4 ec2

Parameters:
  SystemName:
    Type: String
    Default: BasicSpec
  # 최신 이미지
  EC2ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: !Sub ${SystemName}-vpc 
  # 인터넷게이트웨이 
  InternetGateway: 
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: Name
          Value: !Sub ${SystemName}-igw
  InternetGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # 서브넷
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-subnet-0
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-private-subnet-2
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-private-subnet-3
  # 라우팅 테이블
  PublicSubnetRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-public-rt
  PublicSNRTAss0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicSubnetRT
  PublicSNRTAss1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRT
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateSubnetRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-private-rt
  PrivateSNRTAss2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnetRT
  PrivateSNRTAss3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateSubnetRT
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: 
      - InternetGatewayAttachment
      - BastionWithNAT0
      - BastionWithNAT1
    Properties:
      RouteTableId: !Ref PrivateSubnetRT
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref BastionWithNAT1

  # 보안그룹
  PublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow ssh, ICMP
      Tags:
      - Key : Name
        Value : !Sub ${SystemName}-public-sg
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow ssh, ICMP, HTTP/S
      Tags:
      - Key : Name
        Value : !Sub ${SystemName}-private-sg
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
  # EC2
  BastionWithNAT0:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref EC2ImageId
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SourceDestCheck: false # NAT Instance의 경우 반드시 false로 설정
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-bastion-nat-0
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 10.0.0.100
          DeviceIndex: 0
          GroupSet:
            - !Ref PublicSG
          SubnetId: !Ref PublicSubnet0
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd

          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          
          yum install -y iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save
  BastionWithNAT1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref EC2ImageId
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      SourceDestCheck: false # NAT Instance의 경우 반드시 false로 설정
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-bastion-nat-1
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          PrivateIpAddress: 10.0.1.100
          DeviceIndex: 0
          GroupSet:
            - !Ref PublicSG
          SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd

          echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
          echo "net.ipv4.conf.eth0.send_redirects=0" >> /etc/sysctl.conf
          sysctl -p /etc/sysctl.conf
          
          yum install -y iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables -F
          iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          service iptables save

  EC2InstanceWeb2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref EC2ImageId
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-private-web-2
      NetworkInterfaces:
        - PrivateIpAddress: 10.0.2.100
          DeviceIndex: 0
          GroupSet:
            - !Ref PrivateSG
          SubnetId: !Ref PrivateSubnet2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd

          yum update -y
          yum install -y httpd
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
  EC2InstanceWeb3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref EC2ImageId
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-private-web-3
      NetworkInterfaces:
        - PrivateIpAddress: 10.0.3.100
          DeviceIndex: 0
          GroupSet:
            - !Ref PrivateSG
          SubnetId: !Ref PrivateSubnet3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "password!" | passwd --stdin root
          sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          systemctl restart sshd

          yum update -y
          yum install -y httpd
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html

Outputs:
  AmiID:
    Description: used ami id.
    Value: !Ref EC2ImageId
    Export: 
      Name: !Ref EC2ImageId

  VpcID:
    Description: VPC id.
    Value: !Ref VPC
    Export: 
      Name: !Sub ${SystemName}-vpc 

  PubSN0ID:
    Description: public subnet 0 id.
    Value: !Ref PublicSubnet0
    Export: 
      Name: !Sub ${SystemName}-public-subnet-0
  PubSN1ID:
    Description: public subnet 1 id.
    Value: !Ref PublicSubnet1
    Export: 
      Name: !Sub ${SystemName}-public-subnet-1
  PrivSN2ID:
    Description: public subnet 2 id.
    Value: !Ref PrivateSubnet2
    Export: 
      Name: !Sub ${SystemName}-private-subnet-2
  PrivSN3ID:
    Description: public subnet 3 id.
    Value: !Ref PrivateSubnet3
    Export: 
      Name: !Sub ${SystemName}-private-subnet-3

  PublicSubnetRT:
    Description: Public Subnet Route Table ID.
    Value: !Ref PublicSubnetRT
    Export: 
      Name: !Sub ${SystemName}-public-rt
  PrivateSubnetRT:
    Description: Private Subnet Route Table ID.
    Value: !Ref PrivateSubnetRT
    Export: 
      Name: !Sub ${SystemName}-private-rt


